.catalog:
  name: Drone Server 0.5
  version: 0.1
  description: |
    Drone CI Server (version  0.5)
  questions:
    - variable: "DRONE_SECRET"
      type: "string"
      label: "Drone secret"
      description: "Randomly generated string that will be used as a secret"
    - variable: "CONSUMER_KEY"
      type: "string"
      label: "Key"
      description: "Consumer key that is usually obtained from Github/Bitbucket pauth configuration"
    - variable: "CONSUMER_SECRET"
      type: "string"
      label: "Secret"
      description: "Consumer secret that is usually obtained from Github/Bitbucket pauth configuration"
    - variable: "REPO_USER"
      type: "string"
      label: "User"
      description: "Repository username that will be used as a drone admin"
    - variable: "LB_PORT"
      type: "int"
      required: true
      label: "Public Port"
      description: "Port that the load balancer will listen on. Must be accessible to remote driver for webhooks"
    - variable: "DB_DRIVER"
      type: "enum"
      label: "Database Driver"
      description: "Database backend to use."
      required: true
      default: "sqlite3"
      options:
        - sqlite3
        - postgres
        - mysql
    - variable: "DB_CONFIG"
      label: "Database Config"
      type: "string"
      required: true
      default: /var/lib/drone/drone.sqlite
      description: "Must be full db string. The hostname for the DB will be 'database'. See http://readme.drone.io/setup/overview/ for more info"

drone-lb:
  scale: 1
  load_balancer_config:
    haproxy_config: {}
  health_check:
    port: 42
    interval: 2000
    unhealthy_threshold: 3
    healthy_threshold: 2
    response_timeout: 2000
drone-server:
  scale: 1
  metadata:
    drone_secret: ${DRONE_SECRET}
    consumer_secret: ${CONSUMER_SECRET}
    consumer_key: ${CONSUMER_KEY}
    repo_user: ${REPO_USER}
    database_driver: ${DB_DRIVER}
    database_config: "${DB_CONFIG}"
    debug: "true"
  health_check:
    port: 1620
    interval: 2000
    unhealthy_threshold: 3
    strategy: recreate
    request_line: GET /ping HTTP/1.0
    healthy_threshold: 2
    response_timeout: 2000
